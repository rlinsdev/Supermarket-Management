@inject IViewProductsByCategory ViewProductsByCategory
@inject IViewCategoriesUseCase ViewCategoriesUseCase

<div class="form-group">
    <label for="name">Category</label>
    <select id="categoryId" class="form-control" @bind="SelectedCategoryId">
        <option selected></option>
        @foreach (var cat in categories)
        {
            <option value="@cat.CategoryId">@cat.Name</option>
        }
    </select>

    @if (productsInCategory != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Prod Name</th>
                    <th>Qty</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var prod in productsInCategory)
                {
                    <tr @onclick="(() => OnSelectProduct(prod))" style="cursor:pointer">
                        <td>@prod.Name</td>
                        <td>@prod.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {

    private IEnumerable<Product> productsInCategory;

    [Parameter]
    public EventCallback<Product> OnProductSelected {get; set;}

    private int selectedCategoryId;
    public int SelectedCategoryId
    {
        get { return selectedCategoryId; }
        set
        {
            selectedCategoryId = value;
            productsInCategory = ViewProductsByCategory.Execute(value);
            StateHasChanged();
        }
    }


    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        categories = ViewCategoriesUseCase.Execute();
    }

    private void OnSelectProduct(Product product)
    {
        OnProductSelected.InvokeAsync(product);

    }
}
