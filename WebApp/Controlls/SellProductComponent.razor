@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if (productToSell != null)
{
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Product Name</label>
            <input class="form-control" type="text" readonly value="@productToSell.Name" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input class="form-control" type="text" readonly value="@string.Format("{0:c}", productToSell.Price)" />
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>
    @if (@errorMessage != null)
    {
        <br />
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }
}


@code {

    private Product productToSell;
    private string errorMessage;

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (SelectedProduct != null)
        {
            productToSell = new Product
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
        else
            productToSell = null;
    }

    private void SellProduct()
    {
        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);
        if (productToSell.Quantity <= 0)
            errorMessage = $"Quantity [{productToSell.Quantity}] Invalid. Must be greather than 0";
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            SellProductUseCase.Execute(productToSell.ProductId, productToSell.Quantity.Value);
            errorMessage = null;
        }
        else
            errorMessage = $"[{product.Name}] has only [{product.Quantity}] left. It's not enough.";
    }
}
